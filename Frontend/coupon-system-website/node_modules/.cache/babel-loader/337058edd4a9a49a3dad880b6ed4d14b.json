{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.token) {\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass AdminService {\n  async getCustomers() {\n    return await axios.get('http://localhost:8080/admin/get-customers');\n  }\n\n  async getCustomer(id) {\n    return await axios.get('http://localhost:8080/admin/get-customer?id=' + id);\n  }\n\n  async getCustomerByEmail(email) {\n    return await axios.get('http://localhost:8080/admin/get-customer-email?email=' + email);\n  }\n\n  async addCustomer(firstName, lastName, email, password) {\n    return await axios.post('http://localhost:8080/admin/add-customer', {\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async deleteCustomer(id) {\n    return await axios.delete('http://localhost:8080/admin/delete-customer?customerId=' + id);\n  }\n\n  async getLogs() {\n    return await axios.get('http://localhost:8080/admin/get-logs');\n  }\n\n  async clearLogs() {\n    return await axios.delete(\"http://localhost:8080/admin/clear-logs\");\n  }\n\n  async updateCompany(id, name, email, password) {\n    return await axios.put('http://localhost:8080/admin/update-company', {\n      id,\n      name,\n      email,\n      password\n    });\n  }\n\n  async updateCustomer(id, firstName, lastName, email, password) {\n    return await axios.put(\"http://localhost:8080/admin/update-customer\", {\n      id,\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async getCoupons() {\n    return await axios.get(\"http://localhost:8080/admin/get-coupons\");\n  }\n\n}\n\nexport default new AdminService();","map":{"version":3,"sources":["C:/Users/spide/Desktop/Visual Studio Workspace/GradeProjectStage3/coupon-system-website/src/services/user-services/AdminService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","headers","Authorization","AdminService","getCustomers","get","getCustomer","id","getCustomerByEmail","email","addCustomer","firstName","lastName","password","post","deleteCustomer","delete","getLogs","clearLogs","updateCompany","name","put","updateCustomer","getCoupons"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACrC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AACA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAjB,EAAwB;AACpB,UAAMA,KAAK,GAAG,YAAYL,IAAI,CAACK,KAA/B;AACAN,IAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAA+BF,KAA/B;AACH;;AACD,SAAON,MAAP;AACH,CAPD;;AASA,MAAMS,YAAN,CAAmB;AAIG,QAAZC,YAAY,GAAG;AACjB,WAAO,MAAMd,KAAK,CAACe,GAAN,CAAU,2CAAV,CAAb;AACH;;AAEgB,QAAXC,WAAW,CAACC,EAAD,EAAK;AAClB,WAAO,MAAMjB,KAAK,CAACe,GAAN,CAAU,iDAAiDE,EAA3D,CAAb;AACH;;AAEuB,QAAlBC,kBAAkB,CAACC,KAAD,EAAQ;AAC5B,WAAO,MAAMnB,KAAK,CAACe,GAAN,CAAU,0DAA0DI,KAApE,CAAb;AACH;;AAEgB,QAAXC,WAAW,CACbC,SADa,EAEbC,QAFa,EAGbH,KAHa,EAIbI,QAJa,EAKf;AACE,WAAO,MAAMvB,KAAK,CAACwB,IAAN,CAAW,0CAAX,EAAuD;AAChEH,MAAAA,SADgE;AAEhEC,MAAAA,QAFgE;AAGhEH,MAAAA,KAHgE;AAIhEI,MAAAA;AAJgE,KAAvD,CAAb;AAMH;;AAEmB,QAAdE,cAAc,CAACR,EAAD,EAAK;AACrB,WAAO,MAAMjB,KAAK,CAAC0B,MAAN,CAAa,4DAA4DT,EAAzE,CAAb;AACH;;AAEY,QAAPU,OAAO,GAAG;AACZ,WAAO,MAAM3B,KAAK,CAACe,GAAN,CAAU,sCAAV,CAAb;AACH;;AAEc,QAATa,SAAS,GAAG;AACd,WAAO,MAAM5B,KAAK,CAAC0B,MAAN,CAAa,wCAAb,CAAb;AACH;;AAEkB,QAAbG,aAAa,CAACZ,EAAD,EAAKa,IAAL,EAAWX,KAAX,EAAkBI,QAAlB,EAA4B;AAC3C,WAAO,MAAMvB,KAAK,CAAC+B,GAAN,CAAU,4CAAV,EAAwD;AACjEd,MAAAA,EADiE;AAEjEa,MAAAA,IAFiE;AAGjEX,MAAAA,KAHiE;AAIjEI,MAAAA;AAJiE,KAAxD,CAAb;AAMH;;AAEmB,QAAdS,cAAc,CAACf,EAAD,EAAKI,SAAL,EAAgBC,QAAhB,EAA0BH,KAA1B,EAAiCI,QAAjC,EAA2C;AAC3D,WAAO,MAAMvB,KAAK,CAAC+B,GAAN,CAAU,6CAAV,EAAyD;AAClEd,MAAAA,EADkE;AAElEI,MAAAA,SAFkE;AAGlEC,MAAAA,QAHkE;AAIlEH,MAAAA,KAJkE;AAKlEI,MAAAA;AALkE,KAAzD,CAAb;AAOH;;AAEe,QAAVU,UAAU,GAAG;AACf,WAAO,MAAMjC,KAAK,CAACe,GAAN,CAAU,yCAAV,CAAb;AACH;;AA/Dc;;AAmEnB,eAAe,IAAIF,YAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n        const token = 'Bearer ' + user.token;\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n});\r\n\r\nclass AdminService {\r\n\r\n\r\n\r\n    async getCustomers() {\r\n        return await axios.get('http://localhost:8080/admin/get-customers')\r\n    }\r\n\r\n    async getCustomer(id) {\r\n        return await axios.get('http://localhost:8080/admin/get-customer?id=' + id)\r\n    }\r\n\r\n    async getCustomerByEmail(email) {\r\n        return await axios.get('http://localhost:8080/admin/get-customer-email?email=' + email)\r\n    }\r\n\r\n    async addCustomer(\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password\r\n    ) {\r\n        return await axios.post('http://localhost:8080/admin/add-customer', {\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async deleteCustomer(id) {\r\n        return await axios.delete('http://localhost:8080/admin/delete-customer?customerId=' + id)\r\n    }\r\n\r\n    async getLogs() {\r\n        return await axios.get('http://localhost:8080/admin/get-logs')\r\n    }\r\n\r\n    async clearLogs() {\r\n        return await axios.delete(\"http://localhost:8080/admin/clear-logs\")\r\n    }\r\n\r\n    async updateCompany(id, name, email, password) {\r\n        return await axios.put('http://localhost:8080/admin/update-company', {\r\n            id,\r\n            name,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async updateCustomer(id, firstName, lastName, email, password) {\r\n        return await axios.put(\"http://localhost:8080/admin/update-customer\", {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async getCoupons() {\r\n        return await axios.get(\"http://localhost:8080/admin/get-coupons\");\r\n    }\r\n\r\n}\r\n\r\nexport default new AdminService();"]},"metadata":{},"sourceType":"module"}