{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    const token = 'Bearer ' + user.accessToken;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass AuthenticationService {\n  constructor() {\n    this.login = (email, password, userType) => {\n      return axios.post(\"http://localhost:8080/login-manager/login\", {\n        email,\n        password,\n        userType\n      }).then(response => {\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n\n        return response.data;\n      }).catch(err => {\n        console.log(err);\n        throw err;\n      });\n    };\n\n    this.registerCustomer = async (firstName, lastName, email, password) => {\n      return axios.post(\"http://localhost:8080/admin/add-customer\", {\n        firstName,\n        lastName,\n        email,\n        password\n      });\n    };\n\n    this.registerCompany = async (name, email, password) => {\n      return axios.post(\"http://localhost:8080/admin/create-company\", {\n        name,\n        email,\n        password\n      });\n    };\n  }\n\n  logOut() {\n    localStorage.removeItem(\"user\");\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n    ;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/spide/Desktop/Visual Studio Workspace/GradeProjectStage3/coupon-system-website/src/services/AuthenticationService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","accessToken","token","headers","Authorization","AuthenticationService","login","email","password","userType","post","then","response","data","setItem","stringify","catch","err","console","log","registerCustomer","firstName","lastName","registerCompany","name","logOut","removeItem","getCurrentUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACrC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AAEA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,WAAjB,EAA8B;AAC1B,UAAMC,KAAK,GAAG,YAAYN,IAAI,CAACK,WAA/B;AACAN,IAAAA,MAAM,CAACQ,OAAP,CAAeC,aAAf,GAA+BF,KAA/B;AACH;;AAED,SAAOP,MAAP;AACH,CATD;;AAWA,MAAMU,qBAAN,CAA4B;AAAA;AAAA,SACxBC,KADwB,GAChB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AACnC,aAAOlB,KAAK,CAACmB,IAAN,CAAW,2CAAX,EAAwD;AAAEH,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,OAAxD,EACFE,IADE,CACGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACC,IAAT,CAAcZ,WAAlB,EAA+B;AAC3BF,UAAAA,YAAY,CAACe,OAAb,CAAqB,MAArB,EAA6BjB,IAAI,CAACkB,SAAL,CAAeH,QAAQ,CAACC,IAAxB,CAA7B;AACH;;AACD,eAAOD,QAAQ,CAACC,IAAhB;AACH,OANE,EAOFG,KAPE,CAOIC,GAAG,IAAI;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,cAAMA,GAAN;AACH,OAVE,CAAP;AAWH,KAbuB;;AAAA,SAmBxBG,gBAnBwB,GAmBL,OAAOC,SAAP,EAAkBC,QAAlB,EAA4Bf,KAA5B,EAAmCC,QAAnC,KAAgD;AAC/D,aAAOjB,KAAK,CAACmB,IAAN,CAAW,0CAAX,EAAuD;AAC1DW,QAAAA,SAD0D;AAC/CC,QAAAA,QAD+C;AACrCf,QAAAA,KADqC;AAC9BC,QAAAA;AAD8B,OAAvD,CAAP;AAGH,KAvBuB;;AAAA,SAyBxBe,eAzBwB,GAyBN,OAAOC,IAAP,EAAajB,KAAb,EAAoBC,QAApB,KAAiC;AAC/C,aAAOjB,KAAK,CAACmB,IAAN,CAAW,4CAAX,EAAyD;AAC5Dc,QAAAA,IAD4D;AACtDjB,QAAAA,KADsD;AAC/CC,QAAAA;AAD+C,OAAzD,CAAP;AAGH,KA7BuB;AAAA;;AAexBiB,EAAAA,MAAM,GAAG;AACL1B,IAAAA,YAAY,CAAC2B,UAAb,CAAwB,MAAxB;AACH;;AAcDC,EAAAA,cAAc,GAAG;AACb,WAAO9B,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AAAgD;AACnD;;AAjCuB;;AAoC5B,eAAe,IAAIK,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\n\r\naxios.interceptors.request.use(config => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user && user.accessToken) {\r\n        const token = 'Bearer ' + user.accessToken;\r\n        config.headers.Authorization = token;\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\nclass AuthenticationService {\r\n    login = (email, password, userType) => {\r\n        return axios.post(\"http://localhost:8080/login-manager/login\", { email, password, userType })\r\n            .then(response => {\r\n                if (response.data.accessToken) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n                }\r\n                return response.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    logOut() {\r\n        localStorage.removeItem(\"user\");\r\n    }\r\n\r\n    registerCustomer = async (firstName, lastName, email, password) => {\r\n        return axios.post(\"http://localhost:8080/admin/add-customer\", {\r\n            firstName, lastName, email, password\r\n        });\r\n    }\r\n\r\n    registerCompany = async (name, email, password) => {\r\n        return axios.post(\"http://localhost:8080/admin/create-company\", {\r\n            name, email, password\r\n        });\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem('user'));;\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}