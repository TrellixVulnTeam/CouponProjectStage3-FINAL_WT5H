{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.token) {\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass AdminService {\n  async addCustomer(firstName, lastName, email, password) {\n    return await axios.post('http://localhost:8080/admin/add-customer', {\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async updateCustomer(id, firstName, lastName, email, password) {\n    return await axios.put(\"http://localhost:8080/admin/update-customer\", {\n      id,\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async deleteCustomer(id) {\n    return await axios.delete('http://localhost:8080/admin/delete-customer?customerId=' + id);\n  }\n\n  async getCustomers() {\n    return await axios.get('http://localhost:8080/admin/get-customers');\n  }\n\n  async getCustomer(id) {\n    return await axios.get('http://localhost:8080/admin/get-customer?id=' + id);\n  }\n\n  async getCustomerByEmail(email) {\n    return await axios.get('http://localhost:8080/admin/get-customer-email?email=' + email);\n  }\n\n  async createCompany(name, email, password) {\n    return await axios.post('http://localhost:8080/admin/create-company', {\n      name,\n      email,\n      password\n    });\n  }\n\n  async updateCompany(id, name, email, password) {\n    return await axios.put('http://localhost:8080/admin/update-company', {\n      id,\n      name,\n      email,\n      password\n    });\n  }\n\n  async deleteCompany(id) {}\n\n  async getLogs() {\n    return await axios.get('http://localhost:8080/admin/get-logs');\n  }\n\n  async clearLogs() {\n    return await axios.delete(\"http://localhost:8080/admin/clear-logs\");\n  }\n\n  async getCoupons() {\n    return await axios.get(\"http://localhost:8080/admin/get-coupons\");\n  }\n\n}\n\nexport default new AdminService();","map":{"version":3,"sources":["C:/Users/spide/Desktop/Visual Studio Workspace/GradeProjectStage3/coupon-system-website/src/services/user-services/AdminService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","headers","Authorization","AdminService","addCustomer","firstName","lastName","email","password","post","updateCustomer","id","put","deleteCustomer","delete","getCustomers","get","getCustomer","getCustomerByEmail","createCompany","name","updateCompany","deleteCompany","getLogs","clearLogs","getCoupons"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACrC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AACA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAjB,EAAwB;AACpB,UAAMA,KAAK,GAAG,YAAYL,IAAI,CAACK,KAA/B;AACAN,IAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAA+BF,KAA/B;AACH;;AACD,SAAON,MAAP;AACH,CAPD;;AASA,MAAMS,YAAN,CAAmB;AAEE,QAAXC,WAAW,CACbC,SADa,EAEbC,QAFa,EAGbC,KAHa,EAIbC,QAJa,EAKf;AACE,WAAO,MAAMlB,KAAK,CAACmB,IAAN,CAAW,0CAAX,EAAuD;AAChEJ,MAAAA,SADgE;AAEhEC,MAAAA,QAFgE;AAGhEC,MAAAA,KAHgE;AAIhEC,MAAAA;AAJgE,KAAvD,CAAb;AAMH;;AAEmB,QAAdE,cAAc,CAACC,EAAD,EAAKN,SAAL,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AAC3D,WAAO,MAAMlB,KAAK,CAACsB,GAAN,CAAU,6CAAV,EAAyD;AAClED,MAAAA,EADkE;AAElEN,MAAAA,SAFkE;AAGlEC,MAAAA,QAHkE;AAIlEC,MAAAA,KAJkE;AAKlEC,MAAAA;AALkE,KAAzD,CAAb;AAOH;;AAEmB,QAAdK,cAAc,CAACF,EAAD,EAAK;AACrB,WAAO,MAAMrB,KAAK,CAACwB,MAAN,CAAa,4DAA4DH,EAAzE,CAAb;AACH;;AAEiB,QAAZI,YAAY,GAAG;AACjB,WAAO,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,2CAAV,CAAb;AACH;;AAEgB,QAAXC,WAAW,CAACN,EAAD,EAAK;AAClB,WAAO,MAAMrB,KAAK,CAAC0B,GAAN,CAAU,iDAAiDL,EAA3D,CAAb;AACH;;AAEuB,QAAlBO,kBAAkB,CAACX,KAAD,EAAQ;AAC5B,WAAO,MAAMjB,KAAK,CAAC0B,GAAN,CAAU,0DAA0DT,KAApE,CAAb;AACH;;AAEkB,QAAbY,aAAa,CACfC,IADe,EAEfb,KAFe,EAGfC,QAHe,EAIjB;AACE,WAAO,MAAMlB,KAAK,CAACmB,IAAN,CAAW,4CAAX,EAAyD;AAClEW,MAAAA,IADkE;AAElEb,MAAAA,KAFkE;AAGlEC,MAAAA;AAHkE,KAAzD,CAAb;AAKH;;AAEkB,QAAba,aAAa,CAACV,EAAD,EAAKS,IAAL,EAAWb,KAAX,EAAkBC,QAAlB,EAA4B;AAC3C,WAAO,MAAMlB,KAAK,CAACsB,GAAN,CAAU,4CAAV,EAAwD;AACjED,MAAAA,EADiE;AAEjES,MAAAA,IAFiE;AAGjEb,MAAAA,KAHiE;AAIjEC,MAAAA;AAJiE,KAAxD,CAAb;AAMH;;AAEkB,QAAbc,aAAa,CAACX,EAAD,EAAK,CAEvB;;AAIY,QAAPY,OAAO,GAAG;AACZ,WAAO,MAAMjC,KAAK,CAAC0B,GAAN,CAAU,sCAAV,CAAb;AACH;;AAEc,QAATQ,SAAS,GAAG;AACd,WAAO,MAAMlC,KAAK,CAACwB,MAAN,CAAa,wCAAb,CAAb;AACH;;AAEe,QAAVW,UAAU,GAAG;AACf,WAAO,MAAMnC,KAAK,CAAC0B,GAAN,CAAU,yCAAV,CAAb;AACH;;AA/Ec;;AAmFnB,eAAe,IAAIb,YAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n        const token = 'Bearer ' + user.token;\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n});\r\n\r\nclass AdminService {\r\n\r\n    async addCustomer(\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password\r\n    ) {\r\n        return await axios.post('http://localhost:8080/admin/add-customer', {\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async updateCustomer(id, firstName, lastName, email, password) {\r\n        return await axios.put(\"http://localhost:8080/admin/update-customer\", {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async deleteCustomer(id) {\r\n        return await axios.delete('http://localhost:8080/admin/delete-customer?customerId=' + id)\r\n    }\r\n\r\n    async getCustomers() {\r\n        return await axios.get('http://localhost:8080/admin/get-customers')\r\n    }\r\n\r\n    async getCustomer(id) {\r\n        return await axios.get('http://localhost:8080/admin/get-customer?id=' + id)\r\n    }\r\n\r\n    async getCustomerByEmail(email) {\r\n        return await axios.get('http://localhost:8080/admin/get-customer-email?email=' + email)\r\n    }\r\n\r\n    async createCompany(\r\n        name,\r\n        email,\r\n        password\r\n    ) {\r\n        return await axios.post('http://localhost:8080/admin/create-company', {\r\n            name,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async updateCompany(id, name, email, password) {\r\n        return await axios.put('http://localhost:8080/admin/update-company', {\r\n            id,\r\n            name,\r\n            email,\r\n            password\r\n        })\r\n    }\r\n\r\n    async deleteCompany(id) {\r\n\r\n    }\r\n\r\n\r\n\r\n    async getLogs() {\r\n        return await axios.get('http://localhost:8080/admin/get-logs')\r\n    }\r\n\r\n    async clearLogs() {\r\n        return await axios.delete(\"http://localhost:8080/admin/clear-logs\")\r\n    }\r\n\r\n    async getCoupons() {\r\n        return await axios.get(\"http://localhost:8080/admin/get-coupons\");\r\n    }\r\n\r\n}\r\n\r\nexport default new AdminService();"]},"metadata":{},"sourceType":"module"}