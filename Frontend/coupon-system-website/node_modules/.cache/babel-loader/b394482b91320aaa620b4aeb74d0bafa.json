{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spide\\\\Desktop\\\\Visual Studio Workspace\\\\GradeProjectStage3\\\\coupon-system-website\\\\src\\\\components\\\\App\\\\content\\\\User\\\\Admin\\\\AdminCustomers\\\\AdminCustomerActionbar\\\\AdminCustomerActionbar.js\";\nimport './../../../../../../../styles/action-sidebar.css';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport history from '../../../../../history';\nimport AdminCreateCustomer from './AdminCreateCustomer/AdminCreateCustomer';\nimport AdminUpdateCustomer from './AdminUpdateCustomer/AdminUpdateCustomer';\nimport AdminService from '../../../../../../../services/user-services/AdminService';\nimport AuthenticationService from '../../../../../../../services/AuthenticationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminCustomerActionbar(props) {\n  const resetSelection = () => {\n    // for (let index of Object.values(props.values.checked)) {\n    //     const currentRef = props.customersRef.current[index].current\n    //     currentRef.children[0].checked = false\n    // }\n    props.handleReset();\n  };\n\n  const handleAllCustomers = () => {\n    AdminService.getCustomers().then(result => {\n      props.setCustomers(result.data);\n      resetSelection();\n    }, error => {\n      if (error.response.data.response) {\n        setTimeout(() => {\n          alert(\"There are not any customers.\");\n        }, 0);\n        return;\n      }\n\n      if (error.response) {\n        setTimeout(() => {\n          alert(\"Login expired, please login again.\");\n        }, 0);\n        AuthenticationService.logOut();\n      } else setTimeout(() => {\n        alert(\"Servers are currently down, try again later.\");\n      }, 0);\n    });\n  };\n\n  const handleSearchId = () => {\n    let userOption = prompt(\"Enter the id of the customer you want to find.\");\n    if (isNaN(userOption || userOption === ' ')) alert('The entered value was not a number, please enter a numeric value.');else if ((!userOption === 1 || !userOption > 1 || userOption < 1) && userOption != null) alert('The value must be atleast 1.');else if (userOption != null) AdminService.getCustomer(userOption).then(result => {\n      props.setCustomers([result.data]);\n      resetSelection();\n    }, error => {\n      if (error.response.data.response) {\n        setTimeout(() => {\n          alert(\"No customer with the id of \\\"\" + userOption + \"\\\" was found.\");\n        }, 0);\n        return;\n      }\n\n      if (error.response) {\n        setTimeout(() => {\n          alert(\"Login expired, please login again.\");\n        }, 0);\n        AuthenticationService.logOut();\n      } else setTimeout(() => {\n        alert(\"Servers are currently down, try again later.\");\n      }, 0);\n    });\n  };\n\n  const handleSearchEmail = () => {\n    let userOption = prompt(\"Enter the email of the customer you want to find.\");\n    if (userOption != null) AdminService.getCustomerByEmail(userOption).then(result => {\n      props.setCustomers([result.data]);\n      resetSelection();\n    }, error => {\n      if (error.response.data.response) {\n        setTimeout(() => {\n          alert(\"No customer with the email of \\\"\" + userOption + \"\\\" was found.\");\n        }, 0);\n        return;\n      }\n\n      if (error.response) {\n        setTimeout(() => {\n          alert(\"Login expired, please login again.\");\n        }, 0);\n        AuthenticationService.logOut();\n      } else setTimeout(() => {\n        alert(\"Servers are currently down, try again later.\");\n      }, 0);\n    });\n  };\n\n  const handleUpdateCustomer = () => {\n    if (props.values.checked.length === 0) alert(\"You need to select atleast one customer to update.\");else if (props.values.checked.length > 1) alert(\"You can only update one customer at a time.\");else history.push('/admin/customers/update-customer');\n  };\n\n  const handleDeleteCustomer = () => {\n    if (props.values.checked.length === 0) setTimeout(() => {\n      alert(\"You need to select atleast one customer to delete.\");\n    }, 0);else for (let index of Object.values(props.values.checked)) {\n      const currentRef = props.customersRef.current[index].current;\n      const customer = \"ID: \" + currentRef.children[2].children[0].innerHTML + \"\\nFirst Name: \" + currentRef.children[3].children[0].innerHTML + \"\\nLast Name: \" + currentRef.children[4].children[0].innerHTML + \"\\nEmail: \" + currentRef.children[5].children[0].innerHTML + \"\\nPassword: \" + currentRef.children[6].children[0].innerHTML;\n      AdminService.deleteCustomer(currentRef.children[0].id).then(() => {\n        setTimeout(() => {\n          alert(customer + \"\\nCustomer deletion was successful.\");\n        }, 0);\n        window.location.reload();\n      }, error => {\n        if (error.response.data.response) {\n          setTimeout(() => {\n            alert(\"Action Failed\\n\" + error.response.data.response);\n          }, 0);\n          return;\n        }\n\n        if (error.response) {\n          setTimeout(() => {\n            alert(\"Login expired, please login again.\");\n          }, 0);\n          AuthenticationService.logOut();\n        } else setTimeout(() => {\n          alert(\"Servers are currently down, try again later.\");\n        }, 0);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AdminCustomerActionbar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"All Customers\",\n          onClick: handleAllCustomers,\n          children: \"All Customers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Search ID\",\n          onClick: handleSearchId,\n          children: \"Search ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Search Email\",\n          onClick: handleSearchEmail,\n          children: \"Search Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Create Customer\",\n          onClick: () => history.push('/admin/customers/create-customer'),\n          children: \"Create Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Update Customer\",\n          onClick: handleUpdateCustomer,\n          children: \"Update Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Delete Customers\",\n          onClick: handleDeleteCustomer,\n          children: \"Delete Customers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin/customers\",\n        exact: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/customers/create-customer',\n        children: /*#__PURE__*/_jsxDEV(AdminCreateCustomer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/customers/update-customer',\n        children: /*#__PURE__*/_jsxDEV(AdminUpdateCustomer, {\n          customersRef: props.customersRef,\n          values: props.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/customers',\n        children: /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/admin/home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = AdminCustomerActionbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminCustomerActionbar\");","map":{"version":3,"sources":["C:/Users/spide/Desktop/Visual Studio Workspace/GradeProjectStage3/coupon-system-website/src/components/App/content/User/Admin/AdminCustomers/AdminCustomerActionbar/AdminCustomerActionbar.js"],"names":["Redirect","Route","Switch","history","AdminCreateCustomer","AdminUpdateCustomer","AdminService","AuthenticationService","AdminCustomerActionbar","props","resetSelection","handleReset","handleAllCustomers","getCustomers","then","result","setCustomers","data","error","response","setTimeout","alert","logOut","handleSearchId","userOption","prompt","isNaN","getCustomer","handleSearchEmail","getCustomerByEmail","handleUpdateCustomer","values","checked","length","push","handleDeleteCustomer","index","Object","currentRef","customersRef","current","customer","children","innerHTML","deleteCustomer","id","window","location","reload"],"mappings":"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","sourcesContent":["import './../../../../../../../styles/action-sidebar.css'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport history from '../../../../../history'\r\nimport AdminCreateCustomer from './AdminCreateCustomer/AdminCreateCustomer'\r\nimport AdminUpdateCustomer from './AdminUpdateCustomer/AdminUpdateCustomer'\r\nimport AdminService from '../../../../../../../services/user-services/AdminService'\r\nimport AuthenticationService from '../../../../../../../services/AuthenticationService'\r\n\r\nexport default function AdminCustomerActionbar(props) {\r\n\r\n    const resetSelection = () => {\r\n        // for (let index of Object.values(props.values.checked)) {\r\n        //     const currentRef = props.customersRef.current[index].current\r\n        //     currentRef.children[0].checked = false\r\n        // }\r\n        props.handleReset()\r\n    }\r\n\r\n    const handleAllCustomers = () => {\r\n        AdminService\r\n            .getCustomers().then(\r\n                result => {\r\n                    props.setCustomers(result.data)\r\n                    resetSelection()\r\n                },\r\n                error => {\r\n                    if (error.response.data.response) {\r\n                        setTimeout(() => { alert(\"There are not any customers.\") }, 0)\r\n                        return\r\n                    }\r\n                    if (error.response) {\r\n                        setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                        AuthenticationService.logOut();\r\n                    }\r\n                    else\r\n                        setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                }\r\n            )\r\n    }\r\n\r\n    const handleSearchId = () => {\r\n        let userOption = prompt(\"Enter the id of the customer you want to find.\")\r\n        if (isNaN(userOption || userOption === ' '))\r\n            alert('The entered value was not a number, please enter a numeric value.')\r\n        else if ((!userOption === 1 || !userOption > 1 || userOption < 1) && userOption != null)\r\n            alert('The value must be atleast 1.')\r\n        else if (userOption != null)\r\n            AdminService\r\n                .getCustomer(userOption).then(\r\n                    result => {\r\n                        props.setCustomers([result.data])\r\n                        resetSelection()\r\n                    },\r\n                    error => {\r\n                        if (error.response.data.response) {\r\n                            setTimeout(() => { alert(\"No customer with the id of \\\"\" + userOption + \"\\\" was found.\") }, 0)\r\n                            return\r\n                        }\r\n                        if (error.response) {\r\n                            setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                            AuthenticationService.logOut();\r\n                        }\r\n                        else\r\n                            setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                    }\r\n                )\r\n    }\r\n\r\n    const handleSearchEmail = () => {\r\n        let userOption = prompt(\"Enter the email of the customer you want to find.\")\r\n        if (userOption != null)\r\n            AdminService\r\n                .getCustomerByEmail(userOption).then(\r\n                    result => {\r\n                        props.setCustomers([result.data])\r\n                        resetSelection()\r\n                    },\r\n                    error => {\r\n                        if (error.response.data.response) {\r\n                            setTimeout(() => { alert(\"No customer with the email of \\\"\" + userOption + \"\\\" was found.\") }, 0)\r\n                            return\r\n                        }\r\n                        if (error.response) {\r\n                            setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                            AuthenticationService.logOut();\r\n                        }\r\n                        else\r\n                            setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                    }\r\n                )\r\n    }\r\n\r\n    const handleUpdateCustomer = () => {\r\n        if (props.values.checked.length === 0)\r\n            alert(\"You need to select atleast one customer to update.\")\r\n        else if (props.values.checked.length > 1)\r\n            alert(\"You can only update one customer at a time.\")\r\n        else\r\n            history.push('/admin/customers/update-customer')\r\n    }\r\n\r\n    const handleDeleteCustomer = () => {\r\n        if (props.values.checked.length === 0)\r\n            setTimeout(() => { alert(\"You need to select atleast one customer to delete.\") }, 0)\r\n        else\r\n            for (let index of Object.values(props.values.checked)) {\r\n                const currentRef = props.customersRef.current[index].current\r\n                const customer = \"ID: \" + currentRef.children[2].children[0].innerHTML +\r\n                    \"\\nFirst Name: \" + currentRef.children[3].children[0].innerHTML +\r\n                    \"\\nLast Name: \" + currentRef.children[4].children[0].innerHTML +\r\n                    \"\\nEmail: \" + currentRef.children[5].children[0].innerHTML +\r\n                    \"\\nPassword: \" + currentRef.children[6].children[0].innerHTML\r\n                AdminService\r\n                    .deleteCustomer(currentRef.children[0].id).then(\r\n                        () => {\r\n                            setTimeout(() => { alert(customer + \"\\nCustomer deletion was successful.\") }, 0)\r\n                            window.location.reload();\r\n                        },\r\n                        error => {\r\n                            if (error.response.data.response) {\r\n                                setTimeout(() => { alert(\"Action Failed\\n\" + error.response.data.response) }, 0)\r\n                                return\r\n                            }\r\n                            if (error.response) {\r\n                                setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                                AuthenticationService.logOut();\r\n                            }\r\n                            else\r\n                                setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                        }\r\n                    )\r\n            }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='AdminCustomerActionbar'>\r\n                <div className='action-sidebar'>\r\n                    <button className='action-sidebar-button' title='All Customers' onClick={handleAllCustomers}>All Customers</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Search ID' onClick={handleSearchId}>Search ID</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Search Email' onClick={handleSearchEmail}>Search Email</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Create Customer' onClick={() => history.push('/admin/customers/create-customer')}>Create Customer</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Update Customer' onClick={handleUpdateCustomer}>Update Customer</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Delete Customers' onClick={handleDeleteCustomer}>Delete Customers</button>\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <Route path='/admin/customers' exact>\r\n                </Route>\r\n                <Route path={'/admin/customers/create-customer'}>\r\n                    <AdminCreateCustomer />\r\n                </Route>\r\n                <Route path={'/admin/customers/update-customer'}>\r\n                    <AdminUpdateCustomer customersRef={props.customersRef} values={props.values} />\r\n                </Route>\r\n                <Route path={'/admin/customers'}>\r\n                    <Redirect to='/admin/home' />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}