{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spide\\\\Desktop\\\\Visual Studio Workspace\\\\GradeProjectStage3\\\\coupon-system-website\\\\src\\\\components\\\\App\\\\content\\\\User\\\\Admin\\\\AdminCompanies\\\\AdminCompanyActionbar\\\\AdminCompanyActionbar.js\";\nimport './../../../../../../../styles/action-sidebar.css';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport history from '../../../../../history';\nimport AdminCreateCompany from './AdminCreateCompany/AdminCreateCompany';\nimport AdminUpdateCompany from './AdminUpdateCompany/AdminUpdateCompany';\nimport AdminService from '../../../../../../../services/user-services/AdminService';\nimport AuthenticationService from '../../../../../../../services/AuthenticationService';\nimport { isMinimum } from '../../../../../../../utils/checkUtil';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminCompanyActionbar(props) {\n  const resetSelection = () => {\n    for (let index of Object.values(props.values.checked)) {\n      if (props.companiesRef.current[index]) {\n        const currentRef = props.companiesRef.current[index].current;\n        currentRef.children[0].checked = false;\n      }\n    }\n\n    props.handleReset();\n  };\n\n  const handleAllCompanies = () => {\n    AdminService.getCompanies().then(result => {\n      props.setCompanies(result.data);\n      resetSelection();\n    }, error => {\n      try {\n        if (error.response.data.response) {\n          setTimeout(() => {\n            alert(\"There are not any companies.\");\n          }, 0);\n          return;\n        }\n\n        if (error.response) {\n          setTimeout(() => {\n            alert(\"Login expired, please login again.\");\n          }, 0);\n          AuthenticationService.logOut();\n        }\n      } catch {\n        setTimeout(() => {\n          alert(\"Servers are currently down, try again later.\");\n        }, 0);\n        AuthenticationService.logOut();\n      }\n    });\n  };\n\n  const handleSearchId = () => {\n    const userOption = prompt(\"Enter the id of the company you want to find.\");\n    if (isMinimum(userOption, 1)) AdminService.getCompany(userOption).then(result => {\n      props.setCompanies([result.data]);\n      resetSelection();\n    }, error => {\n      try {\n        if (error.response.data.response) {\n          setTimeout(() => {\n            alert(\"No company with the id of \\\"\" + userOption + \"\\\" was found.\");\n          }, 0);\n          return;\n        }\n\n        if (error.response) {\n          setTimeout(() => {\n            alert(\"Login expired, please login again.\");\n          }, 0);\n          AuthenticationService.logOut();\n        }\n      } catch {\n        setTimeout(() => {\n          alert(\"Servers are currently down, try again later.\");\n        }, 0);\n        AuthenticationService.logOut();\n      }\n    });\n  };\n\n  const handleSearchEmail = () => {\n    let userOption = prompt(\"Enter the email of the company you want to find.\");\n    if (userOption != null) AdminService.getCompanyByEmail(userOption).then(result => {\n      props.setCompanies([result.data]);\n      resetSelection();\n    }, error => {\n      try {\n        if (error.response.data.response) {\n          setTimeout(() => {\n            alert(\"No company with the email of \\\"\" + userOption + \"\\\" was found.\");\n          }, 0);\n          return;\n        }\n\n        if (error.response) {\n          setTimeout(() => {\n            alert(\"Login expired, please login again.\");\n          }, 0);\n          AuthenticationService.logOut();\n        }\n      } catch {\n        setTimeout(() => {\n          alert(\"Servers are currently down, try again later.\");\n        }, 0);\n        AuthenticationService.logOut();\n      }\n    });\n  };\n\n  const handleUpdateCompany = () => {\n    if (props.values.checked.length === 0) setTimeout(() => {\n      alert(\"You need to select atleast one company to update.\");\n    }, 0);else if (props.values.checked.length > 1) setTimeout(() => {\n      alert(\"You can only update one company at a time.\");\n    }, 0);else history.push('/admin/companies/update-company');\n  };\n\n  const handleDeleteCompanies = () => {\n    if (props.values.checked.length === 0) setTimeout(() => {\n      alert(\"You need to select atleast one company to delete.\");\n    }, 0);else for (let index of Object.values(props.values.checked)) {\n      const currentRef = props.companiesRef.current[index].current;\n      const company = \"ID: \" + currentRef.children[2].children[0].innerHTML + \"\\nName: \" + currentRef.children[3].children[0].innerHTML + \"\\nEmail: \" + currentRef.children[4].children[0].innerHTML;\n      AdminService.deleteCompany(currentRef.children[0].id).then(() => {\n        setTimeout(() => {\n          alert(company + \"\\nCompany deletion was successful.\");\n        }, 0);\n        handleAllCompanies();\n      }, error => {\n        try {\n          if (error.response.data.response) {\n            setTimeout(() => {\n              alert(\"Action Failed\\n\" + error.response.data.response);\n            }, 0);\n            handleAllCompanies();\n            return;\n          }\n\n          if (error.response) {\n            setTimeout(() => {\n              alert(\"Login expired, please login again.\");\n            }, 0);\n            AuthenticationService.logOut();\n          }\n        } catch {\n          setTimeout(() => {\n            alert(\"Servers are currently down, try again later.\");\n          }, 0);\n          AuthenticationService.logOut();\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AdminCompanyActionbar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"All Companies\",\n          onClick: handleAllCompanies,\n          children: \"All Companies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Search ID\",\n          onClick: handleSearchId,\n          children: \"Search ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Search Email\",\n          onClick: handleSearchEmail,\n          children: \"Search Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Create Company\",\n          onClick: () => history.push('/admin/companies/create-company'),\n          children: \"Create Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Update Company\",\n          onClick: handleUpdateCompany,\n          children: \"Update Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-sidebar-button-seperator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-sidebar-button\",\n          title: \"Delete Companies\",\n          onClick: handleDeleteCompanies,\n          children: \"Delete Companies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin/companies\",\n        exact: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/companies/create-company',\n        children: /*#__PURE__*/_jsxDEV(AdminCreateCompany, {\n          handleAllCompanies: handleAllCompanies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/companies/update-company',\n        children: /*#__PURE__*/_jsxDEV(AdminUpdateCompany, {\n          companiesRef: props.companiesRef,\n          values: props.values,\n          handleAllCompanies: handleAllCompanies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: '/admin/companies',\n        children: /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/admin/home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = AdminCompanyActionbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminCompanyActionbar\");","map":{"version":3,"sources":["C:/Users/spide/Desktop/Visual Studio Workspace/GradeProjectStage3/coupon-system-website/src/components/App/content/User/Admin/AdminCompanies/AdminCompanyActionbar/AdminCompanyActionbar.js"],"names":["Redirect","Route","Switch","history","AdminCreateCompany","AdminUpdateCompany","AdminService","AuthenticationService","isMinimum","AdminCompanyActionbar","props","resetSelection","index","Object","values","checked","companiesRef","current","currentRef","children","handleReset","handleAllCompanies","getCompanies","then","result","setCompanies","data","error","response","setTimeout","alert","logOut","handleSearchId","userOption","prompt","getCompany","handleSearchEmail","getCompanyByEmail","handleUpdateCompany","length","push","handleDeleteCompanies","company","innerHTML","deleteCompany","id"],"mappings":"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","sourcesContent":["import './../../../../../../../styles/action-sidebar.css'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport history from '../../../../../history'\r\nimport AdminCreateCompany from './AdminCreateCompany/AdminCreateCompany'\r\nimport AdminUpdateCompany from './AdminUpdateCompany/AdminUpdateCompany'\r\nimport AdminService from '../../../../../../../services/user-services/AdminService'\r\nimport AuthenticationService from '../../../../../../../services/AuthenticationService'\r\nimport { isMinimum } from '../../../../../../../utils/checkUtil'\r\n\r\nexport default function AdminCompanyActionbar(props) {\r\n\r\n    const resetSelection = () => {\r\n        for (let index of Object.values(props.values.checked)) {\r\n            if (props.companiesRef.current[index]) {\r\n                const currentRef = props.companiesRef.current[index].current\r\n                currentRef.children[0].checked = false\r\n            }\r\n        }\r\n        props.handleReset()\r\n    }\r\n\r\n    const handleAllCompanies = () => {\r\n        AdminService\r\n            .getCompanies().then(\r\n                result => {\r\n                    props.setCompanies(result.data)\r\n                    resetSelection()\r\n                },\r\n                error => {\r\n                    try {\r\n                        if (error.response.data.response) {\r\n                            setTimeout(() => { alert(\"There are not any companies.\") }, 0)\r\n                            return\r\n                        }\r\n                        if (error.response) {\r\n                            setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                            AuthenticationService.logOut();\r\n                        }\r\n                    } catch {\r\n                        setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                        AuthenticationService.logOut();\r\n                    }\r\n                }\r\n            )\r\n    }\r\n\r\n    const handleSearchId = () => {\r\n        const userOption = prompt(\"Enter the id of the company you want to find.\")\r\n        if (isMinimum(userOption, 1))\r\n            AdminService\r\n                .getCompany(userOption).then(\r\n                    result => {\r\n                        props.setCompanies([result.data])\r\n                        resetSelection()\r\n                    },\r\n                    error => {\r\n                        try {\r\n                            if (error.response.data.response) {\r\n                                setTimeout(() => { alert(\"No company with the id of \\\"\" + userOption + \"\\\" was found.\") }, 0)\r\n                                return\r\n                            }\r\n                            if (error.response) {\r\n                                setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                                AuthenticationService.logOut();\r\n                            }\r\n                        } catch {\r\n                            setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                            AuthenticationService.logOut();\r\n                        }\r\n                    }\r\n                )\r\n    }\r\n\r\n    const handleSearchEmail = () => {\r\n        let userOption = prompt(\"Enter the email of the company you want to find.\")\r\n        if (userOption != null)\r\n            AdminService\r\n                .getCompanyByEmail(userOption).then(\r\n                    result => {\r\n                        props.setCompanies([result.data])\r\n                        resetSelection()\r\n                    },\r\n                    error => {\r\n                        try {\r\n                            if (error.response.data.response) {\r\n                                setTimeout(() => { alert(\"No company with the email of \\\"\" + userOption + \"\\\" was found.\") }, 0)\r\n                                return\r\n                            }\r\n                            if (error.response) {\r\n                                setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                                AuthenticationService.logOut();\r\n                            }\r\n                        } catch {\r\n                            setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                            AuthenticationService.logOut();\r\n                        }\r\n                    }\r\n                )\r\n    }\r\n\r\n    const handleUpdateCompany = () => {\r\n        if (props.values.checked.length === 0)\r\n            setTimeout(() => { alert(\"You need to select atleast one company to update.\") }, 0)\r\n        else if (props.values.checked.length > 1)\r\n            setTimeout(() => { alert(\"You can only update one company at a time.\") }, 0)\r\n        else\r\n            history.push('/admin/companies/update-company')\r\n    }\r\n\r\n    const handleDeleteCompanies = () => {\r\n        if (props.values.checked.length === 0)\r\n            setTimeout(() => { alert(\"You need to select atleast one company to delete.\") }, 0)\r\n        else\r\n            for (let index of Object.values(props.values.checked)) {\r\n                const currentRef = props.companiesRef.current[index].current\r\n                const company = \"ID: \" + currentRef.children[2].children[0].innerHTML +\r\n                    \"\\nName: \" + currentRef.children[3].children[0].innerHTML +\r\n                    \"\\nEmail: \" + currentRef.children[4].children[0].innerHTML\r\n                AdminService\r\n                    .deleteCompany(currentRef.children[0].id).then(\r\n                        () => {\r\n                            setTimeout(() => { alert(company + \"\\nCompany deletion was successful.\") }, 0)\r\n                            handleAllCompanies();\r\n                        },\r\n                        error => {\r\n                            try {\r\n                                if (error.response.data.response) {\r\n                                    setTimeout(() => { alert(\"Action Failed\\n\" + error.response.data.response) }, 0)\r\n                                    handleAllCompanies()\r\n                                    return\r\n                                }\r\n                                if (error.response) {\r\n                                    setTimeout(() => { alert(\"Login expired, please login again.\") }, 0)\r\n                                    AuthenticationService.logOut();\r\n                                }\r\n                            } catch {\r\n                                setTimeout(() => { alert(\"Servers are currently down, try again later.\") }, 0)\r\n                                AuthenticationService.logOut();\r\n                            }\r\n                        }\r\n                    )\r\n            }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='AdminCompanyActionbar'>\r\n                <div className='action-sidebar'>\r\n                    <button className='action-sidebar-button' title='All Companies' onClick={handleAllCompanies}>All Companies</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Search ID' onClick={handleSearchId}>Search ID</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Search Email' onClick={handleSearchEmail}>Search Email</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Create Company' onClick={() => history.push('/admin/companies/create-company')}>Create Company</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Update Company' onClick={handleUpdateCompany}>Update Company</button>\r\n                    <div className='action-sidebar-button-seperator'></div>\r\n                    <button className='action-sidebar-button' title='Delete Companies' onClick={handleDeleteCompanies}>Delete Companies</button>\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <Route path='/admin/companies' exact>\r\n                </Route>\r\n                <Route path={'/admin/companies/create-company'}>\r\n                    <AdminCreateCompany handleAllCompanies={handleAllCompanies} />\r\n                </Route>\r\n                <Route path={'/admin/companies/update-company'}>\r\n                    <AdminUpdateCompany companiesRef={props.companiesRef} values={props.values} handleAllCompanies={handleAllCompanies} />\r\n                </Route>\r\n                <Route path={'/admin/companies'}>\r\n                    <Redirect to='/admin/home' />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}